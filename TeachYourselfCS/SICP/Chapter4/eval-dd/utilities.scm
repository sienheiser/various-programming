(define the-empty-environment '())
(define (enclosing-environment env) (cdr env))
(define (extend-environment vars vals base-env)
  (if (= (length vars) (length vals))
    (cons (make-frame vars vals) base-env)
    (if (< (length vars) (length vals))
      (error "Too many arguments supplied" vars vals)
      (error "Too few arguments supplied" vars vals))))

(define (first-frame env) (car env))
(define (frame-variables frame)
  (if (null? frame)
    null
    (cons (caar frame) (frame-variables (cdr frame)))))
(define (frame-values frame)
  (if (null? frame)
    null
    (cons (cdar frame) (frame-values (cdr frame)))))
(define (make-frame variables values)
  (cons variables values))
(define (frame-variables frame) (car frame))
(define (frame-values frame) (cdr frame))
(define (add-binding-to-frame! var val frame)
  (set-car! frame (cons var (car frame)))
  (set-cdr! frame (cons val (cdr frame))))

(define (last-exp? exp)
  (null? (cdr exp)))
(define (first-exp exp)
  (car exp))
(define (rest-exps exp)
  (cdr exp))


(define (make-procedure args body env)
  '(procedure args body env))
(define (procedure-parameters p) (cadr p))
(define (procedure-args exp) (cadr exp))
(define (procedure-body exp) (caddr exp))
(define (procedure-environment p) (cadddr p))

(define (eval-sequence exps env)
(cond ((last-exp? exps)
        (eval (first-exp exps) env))
      (else
        (eval (first-exp exps) env)
        (eval-sequence (rest-exps exps) env))))

(define (true? x)
  (not (eq? x #f)))

(define (lookup-variable-value var env)
  (define (env-loop env)
    (define (scan vars vals)
      (cond ((null? vars)
             (env-loop (enclosing-environment env)))
            ((eq? var (car vars)) (car vals))
            (else (scan (cdr vars) (cdr vals)))))
    (if (eq? env the-empty-environment)
      (error "Unbound variable" var)
      (let ((frame (first-frame env)))
        (scan (frame-variables frame)
              (frame-values frame)))))
  (env-loop env))
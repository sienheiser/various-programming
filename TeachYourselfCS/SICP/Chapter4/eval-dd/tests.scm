(load "eval-dd/main.scm")
(load "eval-dd/utilities.scm")

(define (test-self-evaluating)
    (define env '())
    (define exp 1)
    (= (eval exp env)
       1))

(define (test-variable)
    (define env (list (make-frame (list 'x 'y) (list 4 2))))
    (define exp 'x)
    (= (eval exp env)
       4))

(define (test-quote)
    (define env '())
    (define exp '(quote hello))
    (eq? (eval exp env)
       'hello))

(define (test-assignment)
    (define exp '(assignment y 10))
    (define env (list (make-frame '(x y) '(5 1))))
    (eval exp env)
    (= (eval 'y env)
       10))

(define (test-definition)
    (define exp '(define y 7))
    (define env (list (make-frame '(x) '(5))))
    (eval exp env)
    (= (eval 'y env)
       7))

(define (test-if-consequent)
    (define exp '(if #t (quote yes) (quote no)))
    (define env '())
    (eq? (eval exp env)
         'yes))

(define (test-if-alternative)
    (define exp '(if #f (quote yes) (quote no)))
    (define env '())
    (eq? (eval exp env)
         'no))

(define (test-begin)
    (define exp '(begin 1 2))
    (define env '())
    (eq? (eval exp env)
         2))

(define (test-cond-first)
    (define exp '(cond (#t 'yes) (else 'no)))
    (define env '())
    (eq? (eval exp env)
         'yes))

(define (test-cond-else)
    (define exp '(cond (#f 'yes) (else 'no)))
    (define env '())
    (eq? (eval exp env)
         'no))

(define (test-apply)
    (define exp '(application (primitive +) 1 2))
    (define env '())
    (eq? (eval exp env)
         3))

(define (run-tests)
    (display-test "test-self-evaluating" test-self-evaluating)
    (display-test "test-variable" test-variable)
    (display-test "test-quote" test-quote)
    (display-test "test-assignment" test-assignment)
    (display-test "test-definition" test-definition)
    (display-test "test-if-consequent" test-if-consequent)
    (display-test "test-if-alternative" test-if-alternative)
    (display-test "test-begin" test-begin)
    (display-test "test-cond-first" test-cond-first)
    (display-test "test-cond-else" test-cond-else)
    (display-test "test-apply" test-apply)
    'tests-finished)

(define (display-test test-name test-func)
    (display test-name)
    (display " ")
    (display (test-func))
    (display "\n"))

(run-tests)
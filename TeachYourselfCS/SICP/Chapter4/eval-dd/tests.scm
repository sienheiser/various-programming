(load "eval-dd/main.scm")
(load "eval-dd/utilities.scm")

(define (test-self-evaluating)
    (define env '())
    (define exp 1)
    (= (eval exp env)
       1))

(define (test-variable)
    (define env (list (make-frame (list 'x 'y) (list 4 2))))
    (define exp 'x)
    (= (eval exp env)
       4))

(define (test-quote)
    (define env '())
    (define exp '(quote hello))
    (eq? (eval exp env)
       'hello))

(define (test-assignment)
    (define exp '(assignment y 10))
    (define env (list (make-frame '(x y) '(5 1))))
    (eval exp env)
    (= (eval 'y env)
       10))

(define (test-definition)
    (define exp '(define y 7))
    (define env (list (make-frame '(x) '(5))))
    (eval exp env)
    (= (eval 'y env)
       7))
(define (test-lambda)
    (define exp (list 'application 
                      (list 'lambda (list 'x) 'x)
                      'a))
    (define env (list (cons (list 'a) (list 1))))
    (eq? (eval exp env)
         'a))


(define (test-if-consequent)
    (define exp '(if '(application true? 'yes) (quote yes) (quote no)))
    (define procedure-names '(+ car list true?))
    (define procedure-objects (list (list 'primitive car)
                                    (list 'primitive list)
                                    (list 'primitive true?)))
    (define frame (make-frame procedure-names procedure-objects))
    (define env (list frame))
    (eq? (eval exp env)
         'yes))

(define (test-if-alternative)
    (define exp '(if #f (quote yes) (quote no)))
    (define env '())
    (eq? (eval exp env)
         'no))

(define (test-begin)
    (define exp '(begin 1 2))
    (define env '())
    (eq? (eval exp env)
         2))

(define (test-cond-first)
    (define exp '(cond (#t 'yes) (else 'no)))
    (define env '())
    (eq? (eval exp env)
         'yes))

(define (test-cond-else)
    (define exp '(cond (#f 'yes) (else 'no)))
    (define env '())
    (eq? (eval exp env)
         'no))

(define (test-apply)
    (define exp1 '(application + 1 2))
    (define exp2 '(application car (application list 'a)))
    (define exp3 '(application true? 'yes))
    (define procedure-names '(+ car list true?))
    (define procedure-objects (list (list 'primitive +)
                                    (list 'primitive car)
                                    (list 'primitive list)
                                    (list 'primitive true?)))
    (define frame (make-frame procedure-names procedure-objects))
    (define env (list frame))
    (define test1 (eq? (eval exp1 env) 3))
    (define test2 (eq? (eval exp2 env) 'a))
    (define test3 (eq? (eval exp3 env) #t))
    (and test1 test2 test3))

(define (test-and-true)
    (define exp '(and #t #t #t))
    (define env '())
    (eq? (eval exp env)
         #t))

(define (test-and-false)
    (define exp '(and #t #f #t))
    (define env '())
    (eq? (eval exp env)
         #f))

(define (test-or-false)
    (define exp '(or #f #f #f))
    (define env '())
    (eq? (eval exp env)
         #f))

(define (test-or-true)
    (define exp '(or #f #t #f))
    (define env '())
    (eq? (eval exp env)
         #t))

(define (test-=>)
    (define exp '(cond ((application car (application list 'a)) => (lambda (x) x))
                       (else #f)))
    (define procedure-names '(+ car list true?))
    (define procedure-objects (list (list 'primitive +)
                                    (list 'primitive car)
                                    (list 'primitive list)
                                    (list 'primitive true?)))
    (define frame (make-frame procedure-names procedure-objects))
    (define env (list frame))
    (eq? (eval exp env)
         'a))

(define (run-tests)
    (display-test "test-self-evaluating" test-self-evaluating)
    (display-test "test-variable" test-variable)
    (display-test "test-quote" test-quote)
    (display-test "test-assignment" test-assignment)
    (display-test "test-definition" test-definition)
    (display-test "test-lambda" test-lambda)
    (display-test "test-if-consequent" test-if-consequent)
    (display-test "test-if-alternative" test-if-alternative)
    (display-test "test-begin" test-begin)
    (display-test "test-cond-first" test-cond-first)
    (display-test "test-cond-else" test-cond-else)
    (display-test "test-apply" test-apply)
    (display-test "test-and-true" test-and-true)
    (display-test "test-and-false" test-and-false)
    (display-test "test-or-true" test-or-true)
    (display-test "test-or-false" test-or-false)
    (display-test "test-=>" test-=>)
    'tests-finished)

(define (display-test test-name test-func)
    (display test-name)
    (display " ")
    (display (test-func))
    (display "\n"))

(run-tests)